import java.net.*; 

import java.io.*;import 

java.util.*; 

publicclassGroupChat

{

privatestaticfinalStringTERMINATE="Exit"; 

static String name;

staticvolatilebooleanfinished=false; 

publicstatic void main(String[]args){ 

if (args.length != 2)

System.out.println("Twoargumentsrequired:<multicast-host><port-number>"); 

else{

try{

InetAddressgroup=InetAddress.getByName(args[0]); int 

port = Integer.parseInt(args[1]);

Scannersc=new Scanner(System.in);

System.out.println("ThisprogramisdonebySURESH S221211101143"); System.out.println("Enter your name: 

");

name= sc.nextLine();

MulticastSocketsocket=newMulticastSocket(port); 

socket.setTimeToLive(0);

socket.joinGroup(group);Thread 

t = new Thread(new 

ReadThread(socket,group,port)); 

t.start();

System.out.println("Starttypingmessages...\n"); 

while(true)

{

String message;

message = sc.nextLine(); 

if(message.equalsIgnoreCase(GroupChat.TERMINATE))

{

finished = true; 

socket.leaveGroup(group); 

socket.close();

break;

}

message = name + ": " + message; 

byte[]buffer=message.getBytes(); 

DatagramPacket datagram = new

DatagramPacket(buffer,buffer.length,group,port); 

socket.send(datagram);

}

catch(SocketException se)

{

System.out.println("Errorcreatingsocket"); 

se.printStackTrace();

}

catch(IOException ie{

System.out.println("Errorreading/writingfrom/tosocket"); 

ie.printStackTrace();

}}

}}

classReadThreadimplementsRunnable

{

privateMulticastSocket socket;

privateInetAddressgroup;privateintport; 

privatestaticfinalintMAX_LEN= 1000;

ReadThread(MulticastSocketsocket,InetAddressgroup,intport)

{

this.socket=socket;

this.group=group;this.port = port;

}

@Override 

publicvoidrun()

{

while(!GroupChat.finished)

{

byte[]buffer=newbyte[ReadThread.MAX_LEN]; 

DatagramPacket datagram = new 

DatagramPacket(buffer,buffer.length,group,port); 

String message;

try{ 

socket.receive(datagram); 

message = new

String(buffer,0,datagram.getLength(),"UTF-8"); 

if(!message.startsWith(GroupChat.name)) 

System.out.println(message);

}

catch(IOException e)

{

System.out.println("Socketclosed!");

}

}

}

}
